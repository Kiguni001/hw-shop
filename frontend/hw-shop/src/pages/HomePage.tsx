import React, { useState, useEffect } from "react";
import styles from "../styles/HomePage.module.css";
import logo from "../assets/icons/logo.png";
import SearchBar from "../components/SearchBar";
import UserTireTable from "../components/UserTireTable";
import type { TireRow } from "../components/UserTireTable";
import type { PriceKeys } from "../components/UserTireTable";
import { sendUpdatedPricesToServer } from "../services/api_service";

interface UserData {
  first_name: string;
  last_name: string;
  tcps_ub_id: string;
}

interface CompanyData {
  company_name: string;
}

const HomePage: React.FC = () => {
  const [user, setUser] = useState<UserData | null>(null);
  const [company] = useState<CompanyData | null>(null);
  const [userTireData, setUserTireData] = useState<TireRow[]>([]);

  type ApiServerRow = {
    tcps_id: string;
    tcps_ub_id: string;
    updated_at: string;
  };

  // 1Ô∏è‚É£ Fetch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const userId = sessionStorage.getItem("userUbId");
        console.log("User ID from sessionStorage:", userId);
        if (!userId) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö userId");

        const res = await fetch("http://localhost:3000/api/user/me", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ tcps_ub_id: userId }),
        });

        if (!res.ok) throw new Error("Failed to fetch user data");

        const data: UserData = await res.json();
        console.log("‚úÖ User data loaded:", data);
        setUser(data);
      } catch (err) {
        console.error("‚ùå Error fetching user:", err);
      }
    };

    fetchUserData();
  }, []);

  // 2Ô∏è‚É£ Fetch ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏¢‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ user
  useEffect(() => {
    const fetchUserTire = async () => {
      if (!user?.tcps_ub_id) return;
      try {
        const res = await fetch(
          `http://localhost:3000/api/user_tire?tcps_ub_id=${user.tcps_ub_id}`,
          { credentials: "include" }
        );
        if (!res.ok) throw new Error("Failed to fetch user tire data");
        const data: TireRow[] = await res.json();
        console.log("‚úÖ User tire data loaded:", data);

        // normalize: ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞ row ‡∏°‡∏µ status ‡πÄ‡∏õ‡πá‡∏ô 1 ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
        const normalized = data.map((r) => ({
          ...r,
          status: r.status ?? 1,
        }));

        setUserTireData(normalized);
      } catch (err) {
        console.error("‚ùå Error fetching user tire:", err);
      }
    };
    fetchUserTire();
  }, [user?.tcps_ub_id]);

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô state ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
  const handleUpdateTireRow = (
    tcpsId: string | undefined,
    field: PriceKeys,
    value: number
  ) => {
    if (!tcpsId) return;
    setUserTireData((prev) =>
      prev.map((row) =>
        row.tcps_id === tcpsId
          ? { ...row, [field]: value, status: 2 } // ‚úÖ status = 2 ‡πÅ‡∏ó‡∏ô row ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
          : row
      )
    );
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (PUT ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ status = 2)
  // ‡πÉ‡∏ô HomePage.tsx
  // ‡πÉ‡∏ô HomePage.tsx
  // ‡πÉ‡∏ô HomePage.tsx
  const handleSaveEditedRows = async (editedRows: TireRow[]) => {
    try {
      if (editedRows.length === 0) {
        alert("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç");
        return;
      }

      for (const row of editedRows) {
        if (!row.tcps_id) continue;

        console.log("üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï API:", row);

        const res = await fetch(
          `http://localhost:3000/api/user_tire/${row.tcps_id}`,
          {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(row),
          }
        );

        if (!res.ok) {
          throw new Error(`‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${row.tcps_id}`);
        }

        console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${row.tcps_id}`);
      }

      // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï editedFlags (‡πÉ‡∏ô UserTireTable) ‡πÅ‡∏•‡∏∞/‡∏´‡∏£‡∏∑‡∏≠ local state
      setUserTireData((prev) =>
        prev.map((row) => {
          const editedRow = editedRows.find((r) => r.tcps_id === row.tcps_id);
          return editedRow ? { ...row } : row;
        })
      );

      alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏•‡∏á API ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß!");
    } catch (err) {
      console.error("‚ùå Error saving:", err);
      alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
  };

  // ...existing code...
  const handleSave = async () => {
    const editedRows = userTireData.filter((row) => row.status === 2);
    if (editedRows.length === 0) {
      alert("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç");
      return;
    }

    try {
      const resp = await sendUpdatedPricesToServer(
        user?.tcps_ub_id ?? "",
        editedRows
      );
      console.log("Updated rows:", resp);

      type RawApiRow = {
        tcps_id?: string;
        tcps_ub_id?: string;
        updated_at?: string;
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      };

      const updatedRows: ApiServerRow[] = Array.isArray(resp.data_list)
        ? (resp.data_list as RawApiRow[])
            .filter(
              (r) =>
                typeof r.updated_at === "string" &&
                typeof r.tcps_id === "string" &&
                typeof r.tcps_ub_id === "string"
            )
            .map((r) => ({
              tcps_id: r.tcps_id!,
              tcps_ub_id: r.tcps_ub_id!,
              updated_at: r.updated_at!,
            }))
        : [];

      setUserTireData((prev) =>
        prev.map((row) => {
          const updated = updatedRows.find(
            (r) => r.tcps_id === row.tcps_id && r.tcps_ub_id === row.tcps_ub_id
          );
          return updated
            ? { ...row, status: 1, updatedAt: updated.updated_at }
            : row;
        })
      );

      alert("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å API ‡πÄ‡∏ã‡∏¥‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
    } catch (err) {
      console.error(err);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å API ‡πÄ‡∏ã‡∏¥‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
    }
  };
  // ...existing code...

  return (
    <div className={styles.homePageContainer}>
      {/* Zone 1 Sidebar */}
      <div className={styles.BoxZone1}>
        <div className={styles.Zone1}>
          <div className={styles.logoimg}>
            <img src={logo} alt="Logo" />
          </div>
          <div className={styles.line}></div>
          <button
            className={styles.profileButton}
            onClick={() => alert("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå")}
          >
            <img
              src="/src/assets/icons/user.png"
              alt="user icon"
              className={styles.icon}
            />
            <span>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</span>
          </button>
          <button
            className={styles.saleButton}
            onClick={() => alert("‡∏à‡∏±‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô")}
          >
            <img
              src="/src/assets/icons/sale.png"
              alt="sale icon"
              className={styles.icon}
            />
            <span>‡∏à‡∏±‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</span>
          </button>
          <button
            className={styles.exitButton}
            onClick={() => alert("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö")}
          >
            <img
              src="/src/assets/icons/esc.png"
              alt="exit icon"
              className={styles.icon}
            />
            <span>‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</span>
          </button>
        </div>
      </div>

      {/* Zone 2 Main Content */}
      <div className={styles.BoxZone2}>
        <div className={styles.Zone2}>
          <div className={styles.userInfo}>
            <p className={styles.companyInfo}>
              <span className={styles.bullet}>‚Ä¢</span> ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó:{" "}
              {company?.company_name ?? "-"}
            </p>
            <h1 className={styles.userName}>
              ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {user?.first_name} {user?.last_name}
            </h1>
          </div>
        </div>

        <div className={styles.Zone3}>
          <SearchBar rowCount={userTireData.length} />

          <UserTireTable
            rows={userTireData}
            userUbId={user?.tcps_ub_id ?? ""}
            validatePrice={(field, value) => value >= 0 && value < 5000}
            onUpdateCell={handleUpdateTireRow}
            onSaveEditedRows={handleSaveEditedRows} // ‚úÖ ‡∏™‡πà‡∏á callback ‡πÉ‡∏´‡πâ table
          />

          {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡πÉ‡∏´‡∏°‡πà) */}
          <div style={{ textAlign: "right", marginTop: "16px" }}>
            <button
              style={{
                background: "#007bff",
                color: "white",
                border: "none",
                padding: "8px 16px",
                borderRadius: "6px",
                cursor: "pointer",
                fontWeight: "bold",
              }}
              // onClick={() => {
              //   // ‡∏î‡∏∂‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å table ‡∏ú‡πà‡∏≤‡∏ô state ‡∏Ç‡∏≠‡∏á HomePage
              //   const editedRows = userTireData.filter(
              //     (row) => row.status === 2
              //   );
              //   if (editedRows.length > 0) {
              //     handleSaveEditedRows(editedRows); // ‚úÖ ‡∏™‡πà‡∏á array ‡πÑ‡∏õ
              //   } else {
              //     alert("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç");
              //   }
              // }}
              onClick={handleSave} // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleSave ‡∏ï‡∏£‡∏á‡πÜ
            >
              üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default HomePage;
